function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" append all bundles
call pathogen#infect()
syntax on
filetype plugin indent on

" General --------------
set nocompatible " disable vi compatibility
set modelines=0 " security see http://www.techrepublic.com/blog/security/turn-off-modeline-support-in-vim/4476
set guioptions-=T " go away toolbar
set guifont=Menlo\ Regular:h12
colorscheme vividchalk
set history=500 " i like history
set laststatus=2 " statusline ftw
let mapleader = ',' " leader key
set nowrap
set number
set vb t_vb=
set hlsearch

" Tabs -----------------
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent

" Searching ------------
set ignorecase " ignore case when everything is lowercase
set smartcase " case sensitive when there is a capital letter

" Rest -----------------
set hidden " put buffer in background without write

" Wildmode
set wildmode=list:longest " terminal like tab completion

" Scrolling
set scrolloff=3

" Invisibles
" set list
" nmap <leader>l :set list!<CR> " toogle set list
" set listchars=tab:▸\ ,eol:¬ " show tabs and trailing

" Statusline
if has("statusline")
     set statusline=%<%f\ %h%m%r%=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}%k\ %-14.(%l,%c%V%)\ %P
endif

" vimrc on the fly
if has("autocmd")
    autocmd bufwritepost .vimrc source $MYVIMRC
endif


" CtrlP
let g:ctrlp_custom_ignore = { 'dir': '\.rsync_cache$\|coverage$' }

nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>
autocmd BufWritePre *.rb,*.js,*.coffee :call <SID>StripTrailingWhitespaces()

" vim-rspec-focus
:nnoremap <leader>t :AddFocusTag<CR>
:nnoremap <leader>r :RemoveAllFocusTags<CR>

map  <Leader>n :sp project-notes.txt<cr>
